
include analysis.pi

<code Program/>
<define COLLECT_CALLS  "" />

<parameter in type=STRING default="" message="input file name" />
<parameter out type=STRING default="" message="optimized output file name" />
<parameter call type=STRING default="" message = "call graph file name"/>
<parameter ext type=STRING|"" default="" message = "file extension"/>

<eval inputCode=""; 
      ext2=car(ReverseList(SPLIT(".",in))); 
      if (ext2 : "h" || ext == "") ext = ext2;
      PRINT("File Type:" ext);
       /> 

<define BACKTRACK 1/>

<input cond=(ext : "rose") from=in to=inputCode /> 
<input cond=(ext : "c") from=in to=inputCode annot=0 syntax=("Cfront.code" "FindLoops.code") />
<input cond=(ext : "C"|"cc"|"cpp") from=in to=inputCode annot=0 syntax=("C++front.code" "FindLoops.code") />
<input cond=(ext : "F"|"f") from=in to=inputCode annot=0 syntax=("Ffront.code" "FindLoops.code") />
<input cond=(ext : "F90") from=in to=inputCode annot=0 syntax=("F95front.code" "FindLoops.code") />

<eval print(inputCode); result = CollectPatterns(inputCode, _); />

<output cond=(ext : "c") to=out syntax=("Cfront.code" "FindLoops.code") from=(DEBUG{CODE.StmtList#result})/>
<output cond=(ext : "rose"|"h"|"C"|"cc"|"cpp") to=out syntax=("C++front.code" "FindLoops.code") from=(DEBUG{StmtList#result})/>
<output cond=(ext : "F"|"f") to=out syntax=("Ffront.code" "FindLoops.code") from=(DEBUG{CODE.StmtListm#result})/>
<output cond=(ext : "F90") to=out syntax=("F95front.code" "FindLoops.code") from=(DEBUG{CODE.StmtListm#result})/>
<output cond=(COLLECT_CALLS!="") to=call syntax="FindLoops.code" from = (CODE.CallGraph#COLLECT_CALLS) />
